// Code generated by go-bindata.
// sources:
// static/bundle.js
// static/detail.css
// static/datatables.net/js/jquery.dataTables.min.js
// static/datatables.net-dt/css/jquery.dataTables.min.css
// static/datatables.net-dt/images/sort_asc.png
// static/datatables.net-dt/images/sort_asc_disabled.png
// static/datatables.net-dt/images/sort_both.png
// static/datatables.net-dt/images/sort_desc.png
// static/datatables.net-dt/images/sort_desc_disabled.png
// static/jquery/dist/jquery.min.js
// static/pure/pure-min.css
// templates/activity.html
// templates/activity.json
// templates/detail.html
// templates/detail.json
// templates/killmails.html
// templates/killmails.json
// templates/search.html
// DO NOT EDIT!

// +build dev

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticBundleJs reads file data from disk. It returns an error on failure.
func staticBundleJs() (*asset, error) {
	path := filepath.Join(rootDir, "static/bundle.js")
	name := "static/bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDetailCss reads file data from disk. It returns an error on failure.
func staticDetailCss() (*asset, error) {
	path := filepath.Join(rootDir, "static/detail.css")
	name := "static/detail.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDatatablesNetJsJqueryDatatablesMinJs reads file data from disk. It returns an error on failure.
func staticDatatablesNetJsJqueryDatatablesMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "static/datatables.net/js/jquery.dataTables.min.js")
	name := "static/datatables.net/js/jquery.dataTables.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDatatablesNetDtCssJqueryDatatablesMinCss reads file data from disk. It returns an error on failure.
func staticDatatablesNetDtCssJqueryDatatablesMinCss() (*asset, error) {
	path := filepath.Join(rootDir, "static/datatables.net-dt/css/jquery.dataTables.min.css")
	name := "static/datatables.net-dt/css/jquery.dataTables.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDatatablesNetDtImagesSort_ascPng reads file data from disk. It returns an error on failure.
func staticDatatablesNetDtImagesSort_ascPng() (*asset, error) {
	path := filepath.Join(rootDir, "static/datatables.net-dt/images/sort_asc.png")
	name := "static/datatables.net-dt/images/sort_asc.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDatatablesNetDtImagesSort_asc_disabledPng reads file data from disk. It returns an error on failure.
func staticDatatablesNetDtImagesSort_asc_disabledPng() (*asset, error) {
	path := filepath.Join(rootDir, "static/datatables.net-dt/images/sort_asc_disabled.png")
	name := "static/datatables.net-dt/images/sort_asc_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDatatablesNetDtImagesSort_bothPng reads file data from disk. It returns an error on failure.
func staticDatatablesNetDtImagesSort_bothPng() (*asset, error) {
	path := filepath.Join(rootDir, "static/datatables.net-dt/images/sort_both.png")
	name := "static/datatables.net-dt/images/sort_both.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDatatablesNetDtImagesSort_descPng reads file data from disk. It returns an error on failure.
func staticDatatablesNetDtImagesSort_descPng() (*asset, error) {
	path := filepath.Join(rootDir, "static/datatables.net-dt/images/sort_desc.png")
	name := "static/datatables.net-dt/images/sort_desc.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDatatablesNetDtImagesSort_desc_disabledPng reads file data from disk. It returns an error on failure.
func staticDatatablesNetDtImagesSort_desc_disabledPng() (*asset, error) {
	path := filepath.Join(rootDir, "static/datatables.net-dt/images/sort_desc_disabled.png")
	name := "static/datatables.net-dt/images/sort_desc_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJqueryDistJqueryMinJs reads file data from disk. It returns an error on failure.
func staticJqueryDistJqueryMinJs() (*asset, error) {
	path := filepath.Join(rootDir, "static/jquery/dist/jquery.min.js")
	name := "static/jquery/dist/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticPurePureMinCss reads file data from disk. It returns an error on failure.
func staticPurePureMinCss() (*asset, error) {
	path := filepath.Join(rootDir, "static/pure/pure-min.css")
	name := "static/pure/pure-min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesActivityHtml reads file data from disk. It returns an error on failure.
func templatesActivityHtml() (*asset, error) {
	path := filepath.Join(rootDir, "templates/activity.html")
	name := "templates/activity.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesActivityJson reads file data from disk. It returns an error on failure.
func templatesActivityJson() (*asset, error) {
	path := filepath.Join(rootDir, "templates/activity.json")
	name := "templates/activity.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesDetailHtml reads file data from disk. It returns an error on failure.
func templatesDetailHtml() (*asset, error) {
	path := filepath.Join(rootDir, "templates/detail.html")
	name := "templates/detail.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesDetailJson reads file data from disk. It returns an error on failure.
func templatesDetailJson() (*asset, error) {
	path := filepath.Join(rootDir, "templates/detail.json")
	name := "templates/detail.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesKillmailsHtml reads file data from disk. It returns an error on failure.
func templatesKillmailsHtml() (*asset, error) {
	path := filepath.Join(rootDir, "templates/killmails.html")
	name := "templates/killmails.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesKillmailsJson reads file data from disk. It returns an error on failure.
func templatesKillmailsJson() (*asset, error) {
	path := filepath.Join(rootDir, "templates/killmails.json")
	name := "templates/killmails.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSearchHtml reads file data from disk. It returns an error on failure.
func templatesSearchHtml() (*asset, error) {
	path := filepath.Join(rootDir, "templates/search.html")
	name := "templates/search.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/bundle.js": staticBundleJs,
	"static/detail.css": staticDetailCss,
	"static/datatables.net/js/jquery.dataTables.min.js": staticDatatablesNetJsJqueryDatatablesMinJs,
	"static/datatables.net-dt/css/jquery.dataTables.min.css": staticDatatablesNetDtCssJqueryDatatablesMinCss,
	"static/datatables.net-dt/images/sort_asc.png": staticDatatablesNetDtImagesSort_ascPng,
	"static/datatables.net-dt/images/sort_asc_disabled.png": staticDatatablesNetDtImagesSort_asc_disabledPng,
	"static/datatables.net-dt/images/sort_both.png": staticDatatablesNetDtImagesSort_bothPng,
	"static/datatables.net-dt/images/sort_desc.png": staticDatatablesNetDtImagesSort_descPng,
	"static/datatables.net-dt/images/sort_desc_disabled.png": staticDatatablesNetDtImagesSort_desc_disabledPng,
	"static/jquery/dist/jquery.min.js": staticJqueryDistJqueryMinJs,
	"static/pure/pure-min.css": staticPurePureMinCss,
	"templates/activity.html": templatesActivityHtml,
	"templates/activity.json": templatesActivityJson,
	"templates/detail.html": templatesDetailHtml,
	"templates/detail.json": templatesDetailJson,
	"templates/killmails.html": templatesKillmailsHtml,
	"templates/killmails.json": templatesKillmailsJson,
	"templates/search.html": templatesSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"bundle.js": &bintree{staticBundleJs, map[string]*bintree{}},
		"datatables.net": &bintree{nil, map[string]*bintree{
			"js": &bintree{nil, map[string]*bintree{
				"jquery.dataTables.min.js": &bintree{staticDatatablesNetJsJqueryDatatablesMinJs, map[string]*bintree{}},
			}},
		}},
		"datatables.net-dt": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"jquery.dataTables.min.css": &bintree{staticDatatablesNetDtCssJqueryDatatablesMinCss, map[string]*bintree{}},
			}},
			"images": &bintree{nil, map[string]*bintree{
				"sort_asc.png": &bintree{staticDatatablesNetDtImagesSort_ascPng, map[string]*bintree{}},
				"sort_asc_disabled.png": &bintree{staticDatatablesNetDtImagesSort_asc_disabledPng, map[string]*bintree{}},
				"sort_both.png": &bintree{staticDatatablesNetDtImagesSort_bothPng, map[string]*bintree{}},
				"sort_desc.png": &bintree{staticDatatablesNetDtImagesSort_descPng, map[string]*bintree{}},
				"sort_desc_disabled.png": &bintree{staticDatatablesNetDtImagesSort_desc_disabledPng, map[string]*bintree{}},
			}},
		}},
		"detail.css": &bintree{staticDetailCss, map[string]*bintree{}},
		"jquery": &bintree{nil, map[string]*bintree{
			"dist": &bintree{nil, map[string]*bintree{
				"jquery.min.js": &bintree{staticJqueryDistJqueryMinJs, map[string]*bintree{}},
			}},
		}},
		"pure": &bintree{nil, map[string]*bintree{
			"pure-min.css": &bintree{staticPurePureMinCss, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"activity.html": &bintree{templatesActivityHtml, map[string]*bintree{}},
		"activity.json": &bintree{templatesActivityJson, map[string]*bintree{}},
		"detail.html": &bintree{templatesDetailHtml, map[string]*bintree{}},
		"detail.json": &bintree{templatesDetailJson, map[string]*bintree{}},
		"killmails.html": &bintree{templatesKillmailsHtml, map[string]*bintree{}},
		"killmails.json": &bintree{templatesKillmailsJson, map[string]*bintree{}},
		"search.html": &bintree{templatesSearchHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

