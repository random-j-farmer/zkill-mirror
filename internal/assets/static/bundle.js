(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var activityUrl = "/api/activity/1h/";
function mkTD(text) {
    var td = document.createElement("td");
    td.textContent = text;
    return td;
}
function formatISK(isk) {
    var s = isk.toFixed(2).toString();
    while (s.match(/\d{4}[,.]/)) {
        s = s.replace(/(\d)(\d{3})([,.])/, function (str, dig1, digs, sep) {
            return dig1 + "," + digs + sep;
        });
    }
    return s;
}
function refreshActivityTable() {
    $.ajax({ url: activityUrl, dataType: "json" })
        .done(function (data, status, jqxhr) {
        var tbody = $("#activeSystems tbody").empty().get(0);
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var v = data_1[_i];
            var sys = v;
            var row = document.createElement("tr");
            row.appendChild(mkTD(sys.solarSystemName));
            row.appendChild(mkTD(sys.regionName));
            row.appendChild(mkTD(sys.security.toFixed(1)));
            row.appendChild(mkTD(sys.kills));
            row.appendChild(mkTD(sys.regionKills));
            row.appendChild(mkTD(formatISK(sys.totalValue)));
            row.appendChild(mkTD(formatISK(sys.regionTotalValue)));
            tbody.appendChild(row);
        }
        $('#activeSystems').dataTable({ order: [[3, "desc"]] });
    })
        .fail(function (xxx) {
        console.log("fail: ", xxx);
    });
}
$(document).ready(function () {
    $('#activeSystems').dataTable({ order: [[3, "desc"]] });
    $('#activeSystems tbody').removeAttr("hidden");
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWN0aXZpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFJLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQztBQUd0QyxjQUFjLElBQVM7SUFDbkIsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxFQUFFLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUN0QixNQUFNLENBQUMsRUFBRSxDQUFDO0FBQ2QsQ0FBQztBQUVELG1CQUFtQixHQUFXO0lBQzFCLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7UUFDMUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsVUFBUyxHQUFXLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxHQUFXO1lBQzVGLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUM7QUFjRDtJQUNRLENBQUMsQ0FBQyxJQUFLLENBQUMsRUFBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUMsQ0FBQztTQUM5QyxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUs7UUFDL0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELEdBQUcsQ0FBQyxDQUFVLFVBQUksRUFBSixhQUFJLEVBQUosa0JBQUksRUFBSixJQUFJLENBQUM7WUFBZCxJQUFJLENBQUMsYUFBQTtZQUNOLElBQUksR0FBRyxHQUFlLENBQUMsQ0FBQztZQUN4QixJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQzNDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNqQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN2QyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7UUFDSyxDQUFDLENBQUMsZ0JBQWdCLENBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsVUFBVSxHQUFHO1FBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFFVCxDQUFDO0FBRUQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNWLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQy9ELENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImxldCBhY3Rpdml0eVVybCA9IFwiL2FwaS9hY3Rpdml0eS8xaC9cIjtcblxuXG5mdW5jdGlvbiBta1REKHRleHQ6IGFueSk6IEhUTUxUYWJsZUNlbGxFbGVtZW50IHtcbiAgICBsZXQgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgdGQudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIHJldHVybiB0ZDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SVNLKGlzazogbnVtYmVyKTpzdHJpbmcge1xuICAgIHZhciBzID0gaXNrLnRvRml4ZWQoMikudG9TdHJpbmcoKTtcbiAgICB3aGlsZSAocy5tYXRjaCgvXFxkezR9WywuXS8pKSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoLyhcXGQpKFxcZHszfSkoWywuXSkvLCBmdW5jdGlvbihzdHI6IHN0cmluZywgZGlnMTogc3RyaW5nLCBkaWdzOiBzdHJpbmcsIHNlcDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiBkaWcxICsgXCIsXCIgKyBkaWdzICsgc2VwO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5cbmludGVyZmFjZSBTeXN0ZW1JbmZvIHtcbiAgICBzb2xhclN5c3RlbUlEOiBudW1iZXJcbiAgICBzb2xhclN5c3RlbU5hbWU6IHN0cmluZ1xuICAgIHJlZ2lvbklEOiBudW1iZXJcbiAgICByZWdpb25OYW1lOiBzdHJpbmdcbiAgICBzZWN1cml0eTpudW1iZXJcbiAgICBraWxsczogbnVtYmVyXG4gICAgcmVnaW9uS2lsbHM6IG51bWJlclxuICAgIHRvdGFsVmFsdWU6IG51bWJlclxuICAgIHJlZ2lvblRvdGFsVmFsdWU6bnVtYmVyXG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hBY3Rpdml0eVRhYmxlKCkge1xuICAoPGFueT4kLmFqYXgpKHt1cmw6IGFjdGl2aXR5VXJsLCBkYXRhVHlwZTogXCJqc29uXCJ9KVxuICAgICAgLmRvbmUoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywganF4aHIpIHtcbiAgICAgICAgICBsZXQgdGJvZHkgPSAkKFwiI2FjdGl2ZVN5c3RlbXMgdGJvZHlcIikuZW1wdHkoKS5nZXQoMCk7XG4gICAgICAgICAgZm9yIChsZXQgdiBvZiBkYXRhKSB7XG4gICAgICAgICAgICAgIGxldCBzeXM6IFN5c3RlbUluZm8gPSB2O1xuICAgICAgICAgICAgICBsZXQgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQobWtURChzeXMuc29sYXJTeXN0ZW1OYW1lKSk7XG4gICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChta1REKHN5cy5yZWdpb25OYW1lKSk7XG4gICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChta1REKHN5cy5zZWN1cml0eS50b0ZpeGVkKDEpKSk7XG4gICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChta1REKHN5cy5raWxscykpO1xuICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQobWtURChzeXMucmVnaW9uS2lsbHMpKTtcbiAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG1rVEQoZm9ybWF0SVNLKHN5cy50b3RhbFZhbHVlKSkpO1xuICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQobWtURChmb3JtYXRJU0soc3lzLnJlZ2lvblRvdGFsVmFsdWUpKSk7XG4gICAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgfVxuICAgICAgICAgICg8YW55PiQoJyNhY3RpdmVTeXN0ZW1zJykpLmRhdGFUYWJsZSh7b3JkZXI6IFtbMywgXCJkZXNjXCJdXX0pO1xuICAgICAgfSlcbiAgICAgIC5mYWlsKGZ1bmN0aW9uICh4eHgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWw6IFwiLCB4eHgpO1xuICAgICAgfSk7XG5cbn1cblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICg8YW55PiQoJyNhY3RpdmVTeXN0ZW1zJykpLmRhdGFUYWJsZSh7b3JkZXI6IFtbMywgXCJkZXNjXCJdXX0pO1xufSk7XG4iXX0=
